// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ycsb.proto

#include "ycsb.pb.h"
#include "ycsb.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace nvrec {

static const char* YCSB_method_names[] = {
  "/nvrec.YCSB/Read",
  "/nvrec.YCSB/Scan",
  "/nvrec.YCSB/Update",
  "/nvrec.YCSB/Insert",
  "/nvrec.YCSB/Delete",
};

std::unique_ptr< YCSB::Stub> YCSB::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< YCSB::Stub> stub(new YCSB::Stub(channel));
  return stub;
}

YCSB::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Read_(YCSB_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Scan_(YCSB_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(YCSB_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Insert_(YCSB_method_names[3], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(YCSB_method_names[4], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status YCSB::Stub::Read(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::nvrec::ReadResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Read_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>* YCSB::Stub::AsyncReadRaw(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>(channel_.get(), cq, rpcmethod_Read_, context, request);
}

::grpc::Status YCSB::Stub::Scan(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::nvrec::ReadResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Scan_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>* YCSB::Stub::AsyncScanRaw(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>(channel_.get(), cq, rpcmethod_Scan_, context, request);
}

::grpc::Status YCSB::Stub::Update(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::nvrec::UpdateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Update_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>* YCSB::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::Status YCSB::Stub::Insert(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::nvrec::UpdateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Insert_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>* YCSB::Stub::AsyncInsertRaw(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>(channel_.get(), cq, rpcmethod_Insert_, context, request);
}

::grpc::Status YCSB::Stub::Delete(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::nvrec::UpdateResponse* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>* YCSB::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

YCSB::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      YCSB_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< YCSB::Service, ::nvrec::ReadRequest, ::nvrec::ReadResponse>(
          std::mem_fn(&YCSB::Service::Read), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      YCSB_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< YCSB::Service, ::nvrec::ScanRequest, ::nvrec::ReadResponse>(
          std::mem_fn(&YCSB::Service::Scan), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      YCSB_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< YCSB::Service, ::nvrec::UpdateRequest, ::nvrec::UpdateResponse>(
          std::mem_fn(&YCSB::Service::Update), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      YCSB_method_names[3],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< YCSB::Service, ::nvrec::UpdateRequest, ::nvrec::UpdateResponse>(
          std::mem_fn(&YCSB::Service::Insert), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      YCSB_method_names[4],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< YCSB::Service, ::nvrec::DeleteRequest, ::nvrec::UpdateResponse>(
          std::mem_fn(&YCSB::Service::Delete), this)));
}

YCSB::Service::~Service() {
}

::grpc::Status YCSB::Service::Read(::grpc::ServerContext* context, const ::nvrec::ReadRequest* request, ::nvrec::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status YCSB::Service::Scan(::grpc::ServerContext* context, const ::nvrec::ScanRequest* request, ::nvrec::ReadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status YCSB::Service::Update(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status YCSB::Service::Insert(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status YCSB::Service::Delete(::grpc::ServerContext* context, const ::nvrec::DeleteRequest* request, ::nvrec::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace nvrec

