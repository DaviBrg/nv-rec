// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ycsb.proto

#ifndef PROTOBUF_ycsb_2eproto__INCLUDED
#define PROTOBUF_ycsb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace nvrec {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ycsb_2eproto();
void protobuf_AssignDesc_ycsb_2eproto();
void protobuf_ShutdownFile_ycsb_2eproto();

class DeleteRequest;
class KVPair;
class ReadRequest;
class ReadResponse;
class ScanRequest;
class UpdateRequest;
class UpdateResponse;

enum ResultType {
  FAIL = 0,
  OK = 1,
  ResultType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ResultType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ResultType_IsValid(int value);
const ResultType ResultType_MIN = FAIL;
const ResultType ResultType_MAX = OK;
const int ResultType_ARRAYSIZE = ResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultType_descriptor();
inline const ::std::string& ResultType_Name(ResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultType_descriptor(), value);
}
inline bool ResultType_Parse(
    const ::std::string& name, ResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultType>(
    ResultType_descriptor(), name, value);
}
// ===================================================================

class KVPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.KVPair) */ {
 public:
  KVPair();
  virtual ~KVPair();

  KVPair(const KVPair& from);

  inline KVPair& operator=(const KVPair& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KVPair& default_instance();

  void Swap(KVPair* other);

  // implements Message ----------------------------------------------

  inline KVPair* New() const { return New(NULL); }

  KVPair* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KVPair& from);
  void MergeFrom(const KVPair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KVPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:nvrec.KVPair)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static KVPair* default_instance_;
};
// -------------------------------------------------------------------

class ReadRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.ReadRequest) */ {
 public:
  ReadRequest();
  virtual ~ReadRequest();

  ReadRequest(const ReadRequest& from);

  inline ReadRequest& operator=(const ReadRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadRequest& default_instance();

  void Swap(ReadRequest* other);

  // implements Message ----------------------------------------------

  inline ReadRequest* New() const { return New(NULL); }

  ReadRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadRequest& from);
  void MergeFrom(const ReadRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // repeated string fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // @@protoc_insertion_point(class_scope:nvrec.ReadRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static ReadRequest* default_instance_;
};
// -------------------------------------------------------------------

class ScanRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.ScanRequest) */ {
 public:
  ScanRequest();
  virtual ~ScanRequest();

  ScanRequest(const ScanRequest& from);

  inline ScanRequest& operator=(const ScanRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ScanRequest& default_instance();

  void Swap(ScanRequest* other);

  // implements Message ----------------------------------------------

  inline ScanRequest* New() const { return New(NULL); }

  ScanRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ScanRequest& from);
  void MergeFrom(const ScanRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ScanRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint64 recordcount = 3;
  void clear_recordcount();
  static const int kRecordcountFieldNumber = 3;
  ::google::protobuf::uint64 recordcount() const;
  void set_recordcount(::google::protobuf::uint64 value);

  // repeated string fields = 4;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 4;
  const ::std::string& fields(int index) const;
  ::std::string* mutable_fields(int index);
  void set_fields(int index, const ::std::string& value);
  void set_fields(int index, const char* value);
  void set_fields(int index, const char* value, size_t size);
  ::std::string* add_fields();
  void add_fields(const ::std::string& value);
  void add_fields(const char* value);
  void add_fields(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& fields() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_fields();

  // @@protoc_insertion_point(class_scope:nvrec.ScanRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 recordcount_;
  ::google::protobuf::RepeatedPtrField< ::std::string> fields_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static ScanRequest* default_instance_;
};
// -------------------------------------------------------------------

class ReadResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.ReadResponse) */ {
 public:
  ReadResponse();
  virtual ~ReadResponse();

  ReadResponse(const ReadResponse& from);

  inline ReadResponse& operator=(const ReadResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReadResponse& default_instance();

  void Swap(ReadResponse* other);

  // implements Message ----------------------------------------------

  inline ReadResponse* New() const { return New(NULL); }

  ReadResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReadResponse& from);
  void MergeFrom(const ReadResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ReadResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nvrec.ResultType status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::nvrec::ResultType status() const;
  void set_status(::nvrec::ResultType value);

  // repeated .nvrec.KVPair result = 2;
  int result_size() const;
  void clear_result();
  static const int kResultFieldNumber = 2;
  const ::nvrec::KVPair& result(int index) const;
  ::nvrec::KVPair* mutable_result(int index);
  ::nvrec::KVPair* add_result();
  ::google::protobuf::RepeatedPtrField< ::nvrec::KVPair >*
      mutable_result();
  const ::google::protobuf::RepeatedPtrField< ::nvrec::KVPair >&
      result() const;

  // @@protoc_insertion_point(class_scope:nvrec.ReadResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::nvrec::KVPair > result_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static ReadResponse* default_instance_;
};
// -------------------------------------------------------------------

class UpdateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.UpdateRequest) */ {
 public:
  UpdateRequest();
  virtual ~UpdateRequest();

  UpdateRequest(const UpdateRequest& from);

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateRequest& default_instance();

  void Swap(UpdateRequest* other);

  // implements Message ----------------------------------------------

  inline UpdateRequest* New() const { return New(NULL); }

  UpdateRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateRequest& from);
  void MergeFrom(const UpdateRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // repeated string values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_values();

  // @@protoc_insertion_point(class_scope:nvrec.UpdateRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::RepeatedPtrField< ::std::string> values_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static UpdateRequest* default_instance_;
};
// -------------------------------------------------------------------

class DeleteRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.DeleteRequest) */ {
 public:
  DeleteRequest();
  virtual ~DeleteRequest();

  DeleteRequest(const DeleteRequest& from);

  inline DeleteRequest& operator=(const DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteRequest& default_instance();

  void Swap(DeleteRequest* other);

  // implements Message ----------------------------------------------

  inline DeleteRequest* New() const { return New(NULL); }

  DeleteRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteRequest& from);
  void MergeFrom(const DeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table = 1;
  void clear_table();
  static const int kTableFieldNumber = 1;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // optional string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:nvrec.DeleteRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static DeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class UpdateResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:nvrec.UpdateResponse) */ {
 public:
  UpdateResponse();
  virtual ~UpdateResponse();

  UpdateResponse(const UpdateResponse& from);

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateResponse& default_instance();

  void Swap(UpdateResponse* other);

  // implements Message ----------------------------------------------

  inline UpdateResponse* New() const { return New(NULL); }

  UpdateResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateResponse& from);
  void MergeFrom(const UpdateResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .nvrec.ResultType status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::nvrec::ResultType status() const;
  void set_status(::nvrec::ResultType value);

  // @@protoc_insertion_point(class_scope:nvrec.UpdateResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  int status_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ycsb_2eproto();
  friend void protobuf_AssignDesc_ycsb_2eproto();
  friend void protobuf_ShutdownFile_ycsb_2eproto();

  void InitAsDefaultInstance();
  static UpdateResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KVPair

// optional string key = 1;
inline void KVPair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KVPair::key() const {
  // @@protoc_insertion_point(field_get:nvrec.KVPair.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.KVPair.key)
}
inline void KVPair::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.KVPair.key)
}
inline void KVPair::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.KVPair.key)
}
inline ::std::string* KVPair::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.KVPair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVPair::release_key() {
  // @@protoc_insertion_point(field_release:nvrec.KVPair.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nvrec.KVPair.key)
}

// optional string value = 2;
inline void KVPair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& KVPair::value() const {
  // @@protoc_insertion_point(field_get:nvrec.KVPair.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.KVPair.value)
}
inline void KVPair::set_value(const char* value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.KVPair.value)
}
inline void KVPair::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.KVPair.value)
}
inline ::std::string* KVPair::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.KVPair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* KVPair::release_value() {
  // @@protoc_insertion_point(field_release:nvrec.KVPair.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void KVPair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:nvrec.KVPair.value)
}

// -------------------------------------------------------------------

// ReadRequest

// optional string table = 1;
inline void ReadRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRequest::table() const {
  // @@protoc_insertion_point(field_get:nvrec.ReadRequest.table)
  return table_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.ReadRequest.table)
}
inline void ReadRequest::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.ReadRequest.table)
}
inline void ReadRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.ReadRequest.table)
}
inline ::std::string* ReadRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.ReadRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRequest::release_table() {
  // @@protoc_insertion_point(field_release:nvrec.ReadRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:nvrec.ReadRequest.table)
}

// optional string key = 2;
inline void ReadRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReadRequest::key() const {
  // @@protoc_insertion_point(field_get:nvrec.ReadRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.ReadRequest.key)
}
inline void ReadRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.ReadRequest.key)
}
inline ::std::string* ReadRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.ReadRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReadRequest::release_key() {
  // @@protoc_insertion_point(field_release:nvrec.ReadRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReadRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nvrec.ReadRequest.key)
}

// repeated string fields = 3;
inline int ReadRequest::fields_size() const {
  return fields_.size();
}
inline void ReadRequest::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& ReadRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:nvrec.ReadRequest.fields)
  return fields_.Get(index);
}
inline ::std::string* ReadRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nvrec.ReadRequest.fields)
  return fields_.Mutable(index);
}
inline void ReadRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nvrec.ReadRequest.fields)
  fields_.Mutable(index)->assign(value);
}
inline void ReadRequest::set_fields(int index, const char* value) {
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvrec.ReadRequest.fields)
}
inline void ReadRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvrec.ReadRequest.fields)
}
inline ::std::string* ReadRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:nvrec.ReadRequest.fields)
  return fields_.Add();
}
inline void ReadRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvrec.ReadRequest.fields)
}
inline void ReadRequest::add_fields(const char* value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvrec.ReadRequest.fields)
}
inline void ReadRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvrec.ReadRequest.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ReadRequest::fields() const {
  // @@protoc_insertion_point(field_list:nvrec.ReadRequest.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ReadRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:nvrec.ReadRequest.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// ScanRequest

// optional string table = 1;
inline void ScanRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::table() const {
  // @@protoc_insertion_point(field_get:nvrec.ScanRequest.table)
  return table_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.ScanRequest.table)
}
inline void ScanRequest::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.ScanRequest.table)
}
inline void ScanRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.ScanRequest.table)
}
inline ::std::string* ScanRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.ScanRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_table() {
  // @@protoc_insertion_point(field_release:nvrec.ScanRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:nvrec.ScanRequest.table)
}

// optional string key = 2;
inline void ScanRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ScanRequest::key() const {
  // @@protoc_insertion_point(field_get:nvrec.ScanRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.ScanRequest.key)
}
inline void ScanRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.ScanRequest.key)
}
inline void ScanRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.ScanRequest.key)
}
inline ::std::string* ScanRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.ScanRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ScanRequest::release_key() {
  // @@protoc_insertion_point(field_release:nvrec.ScanRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ScanRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nvrec.ScanRequest.key)
}

// optional uint64 recordcount = 3;
inline void ScanRequest::clear_recordcount() {
  recordcount_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ScanRequest::recordcount() const {
  // @@protoc_insertion_point(field_get:nvrec.ScanRequest.recordcount)
  return recordcount_;
}
inline void ScanRequest::set_recordcount(::google::protobuf::uint64 value) {
  
  recordcount_ = value;
  // @@protoc_insertion_point(field_set:nvrec.ScanRequest.recordcount)
}

// repeated string fields = 4;
inline int ScanRequest::fields_size() const {
  return fields_.size();
}
inline void ScanRequest::clear_fields() {
  fields_.Clear();
}
inline const ::std::string& ScanRequest::fields(int index) const {
  // @@protoc_insertion_point(field_get:nvrec.ScanRequest.fields)
  return fields_.Get(index);
}
inline ::std::string* ScanRequest::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:nvrec.ScanRequest.fields)
  return fields_.Mutable(index);
}
inline void ScanRequest::set_fields(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nvrec.ScanRequest.fields)
  fields_.Mutable(index)->assign(value);
}
inline void ScanRequest::set_fields(int index, const char* value) {
  fields_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvrec.ScanRequest.fields)
}
inline void ScanRequest::set_fields(int index, const char* value, size_t size) {
  fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvrec.ScanRequest.fields)
}
inline ::std::string* ScanRequest::add_fields() {
  // @@protoc_insertion_point(field_add_mutable:nvrec.ScanRequest.fields)
  return fields_.Add();
}
inline void ScanRequest::add_fields(const ::std::string& value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvrec.ScanRequest.fields)
}
inline void ScanRequest::add_fields(const char* value) {
  fields_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvrec.ScanRequest.fields)
}
inline void ScanRequest::add_fields(const char* value, size_t size) {
  fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvrec.ScanRequest.fields)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ScanRequest::fields() const {
  // @@protoc_insertion_point(field_list:nvrec.ScanRequest.fields)
  return fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ScanRequest::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:nvrec.ScanRequest.fields)
  return &fields_;
}

// -------------------------------------------------------------------

// ReadResponse

// optional .nvrec.ResultType status = 1;
inline void ReadResponse::clear_status() {
  status_ = 0;
}
inline ::nvrec::ResultType ReadResponse::status() const {
  // @@protoc_insertion_point(field_get:nvrec.ReadResponse.status)
  return static_cast< ::nvrec::ResultType >(status_);
}
inline void ReadResponse::set_status(::nvrec::ResultType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:nvrec.ReadResponse.status)
}

// repeated .nvrec.KVPair result = 2;
inline int ReadResponse::result_size() const {
  return result_.size();
}
inline void ReadResponse::clear_result() {
  result_.Clear();
}
inline const ::nvrec::KVPair& ReadResponse::result(int index) const {
  // @@protoc_insertion_point(field_get:nvrec.ReadResponse.result)
  return result_.Get(index);
}
inline ::nvrec::KVPair* ReadResponse::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:nvrec.ReadResponse.result)
  return result_.Mutable(index);
}
inline ::nvrec::KVPair* ReadResponse::add_result() {
  // @@protoc_insertion_point(field_add:nvrec.ReadResponse.result)
  return result_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::nvrec::KVPair >*
ReadResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:nvrec.ReadResponse.result)
  return &result_;
}
inline const ::google::protobuf::RepeatedPtrField< ::nvrec::KVPair >&
ReadResponse::result() const {
  // @@protoc_insertion_point(field_list:nvrec.ReadResponse.result)
  return result_;
}

// -------------------------------------------------------------------

// UpdateRequest

// optional string table = 1;
inline void UpdateRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRequest::table() const {
  // @@protoc_insertion_point(field_get:nvrec.UpdateRequest.table)
  return table_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.UpdateRequest.table)
}
inline void UpdateRequest::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.UpdateRequest.table)
}
inline void UpdateRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.UpdateRequest.table)
}
inline ::std::string* UpdateRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.UpdateRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRequest::release_table() {
  // @@protoc_insertion_point(field_release:nvrec.UpdateRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:nvrec.UpdateRequest.table)
}

// optional string key = 2;
inline void UpdateRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateRequest::key() const {
  // @@protoc_insertion_point(field_get:nvrec.UpdateRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.UpdateRequest.key)
}
inline void UpdateRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.UpdateRequest.key)
}
inline void UpdateRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.UpdateRequest.key)
}
inline ::std::string* UpdateRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.UpdateRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateRequest::release_key() {
  // @@protoc_insertion_point(field_release:nvrec.UpdateRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nvrec.UpdateRequest.key)
}

// repeated string values = 3;
inline int UpdateRequest::values_size() const {
  return values_.size();
}
inline void UpdateRequest::clear_values() {
  values_.Clear();
}
inline const ::std::string& UpdateRequest::values(int index) const {
  // @@protoc_insertion_point(field_get:nvrec.UpdateRequest.values)
  return values_.Get(index);
}
inline ::std::string* UpdateRequest::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:nvrec.UpdateRequest.values)
  return values_.Mutable(index);
}
inline void UpdateRequest::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:nvrec.UpdateRequest.values)
  values_.Mutable(index)->assign(value);
}
inline void UpdateRequest::set_values(int index, const char* value) {
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nvrec.UpdateRequest.values)
}
inline void UpdateRequest::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nvrec.UpdateRequest.values)
}
inline ::std::string* UpdateRequest::add_values() {
  // @@protoc_insertion_point(field_add_mutable:nvrec.UpdateRequest.values)
  return values_.Add();
}
inline void UpdateRequest::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:nvrec.UpdateRequest.values)
}
inline void UpdateRequest::add_values(const char* value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nvrec.UpdateRequest.values)
}
inline void UpdateRequest::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nvrec.UpdateRequest.values)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateRequest::values() const {
  // @@protoc_insertion_point(field_list:nvrec.UpdateRequest.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateRequest::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:nvrec.UpdateRequest.values)
  return &values_;
}

// -------------------------------------------------------------------

// DeleteRequest

// optional string table = 1;
inline void DeleteRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::table() const {
  // @@protoc_insertion_point(field_get:nvrec.DeleteRequest.table)
  return table_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_table(const ::std::string& value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.DeleteRequest.table)
}
inline void DeleteRequest::set_table(const char* value) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.DeleteRequest.table)
}
inline void DeleteRequest::set_table(const char* value, size_t size) {
  
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.DeleteRequest.table)
}
inline ::std::string* DeleteRequest::mutable_table() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.DeleteRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_table() {
  // @@protoc_insertion_point(field_release:nvrec.DeleteRequest.table)
  
  return table_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    
  } else {
    
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:nvrec.DeleteRequest.table)
}

// optional string key = 2;
inline void DeleteRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteRequest::key() const {
  // @@protoc_insertion_point(field_get:nvrec.DeleteRequest.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:nvrec.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:nvrec.DeleteRequest.key)
}
inline void DeleteRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:nvrec.DeleteRequest.key)
}
inline ::std::string* DeleteRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:nvrec.DeleteRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteRequest::release_key() {
  // @@protoc_insertion_point(field_release:nvrec.DeleteRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:nvrec.DeleteRequest.key)
}

// -------------------------------------------------------------------

// UpdateResponse

// optional .nvrec.ResultType status = 1;
inline void UpdateResponse::clear_status() {
  status_ = 0;
}
inline ::nvrec::ResultType UpdateResponse::status() const {
  // @@protoc_insertion_point(field_get:nvrec.UpdateResponse.status)
  return static_cast< ::nvrec::ResultType >(status_);
}
inline void UpdateResponse::set_status(::nvrec::ResultType value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:nvrec.UpdateResponse.status)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nvrec

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::nvrec::ResultType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::nvrec::ResultType>() {
  return ::nvrec::ResultType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ycsb_2eproto__INCLUDED
