// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ycsb.proto
#ifndef GRPC_ycsb_2eproto__INCLUDED
#define GRPC_ycsb_2eproto__INCLUDED

#include "ycsb.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace nvrec {

class YCSB final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Read(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::nvrec::ReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::ReadResponse>>(AsyncReadRaw(context, request, cq));
    }
    virtual ::grpc::Status Scan(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::nvrec::ReadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::ReadResponse>> AsyncScan(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::ReadResponse>>(AsyncScanRaw(context, request, cq));
    }
    virtual ::grpc::Status Update(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::nvrec::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status Insert(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::nvrec::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>> AsyncInsert(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>>(AsyncInsertRaw(context, request, cq));
    }
    virtual ::grpc::Status Delete(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::nvrec::UpdateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>> AsyncDelete(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>>(AsyncDeleteRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::ReadResponse>* AsyncScanRaw(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>* AsyncInsertRaw(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::nvrec::UpdateResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Read(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::nvrec::ReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>> AsyncRead(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>>(AsyncReadRaw(context, request, cq));
    }
    ::grpc::Status Scan(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::nvrec::ReadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>> AsyncScan(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>>(AsyncScanRaw(context, request, cq));
    }
    ::grpc::Status Update(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::nvrec::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>> AsyncUpdate(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>>(AsyncUpdateRaw(context, request, cq));
    }
    ::grpc::Status Insert(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::nvrec::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>> AsyncInsert(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>>(AsyncInsertRaw(context, request, cq));
    }
    ::grpc::Status Delete(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::nvrec::UpdateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>> AsyncDelete(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>>(AsyncDeleteRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>* AsyncReadRaw(::grpc::ClientContext* context, const ::nvrec::ReadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvrec::ReadResponse>* AsyncScanRaw(::grpc::ClientContext* context, const ::nvrec::ScanRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>* AsyncUpdateRaw(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>* AsyncInsertRaw(::grpc::ClientContext* context, const ::nvrec::UpdateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::nvrec::UpdateResponse>* AsyncDeleteRaw(::grpc::ClientContext* context, const ::nvrec::DeleteRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_Read_;
    const ::grpc::RpcMethod rpcmethod_Scan_;
    const ::grpc::RpcMethod rpcmethod_Update_;
    const ::grpc::RpcMethod rpcmethod_Insert_;
    const ::grpc::RpcMethod rpcmethod_Delete_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Read(::grpc::ServerContext* context, const ::nvrec::ReadRequest* request, ::nvrec::ReadResponse* response);
    virtual ::grpc::Status Scan(::grpc::ServerContext* context, const ::nvrec::ScanRequest* request, ::nvrec::ReadResponse* response);
    virtual ::grpc::Status Update(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response);
    virtual ::grpc::Status Insert(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response);
    virtual ::grpc::Status Delete(::grpc::ServerContext* context, const ::nvrec::DeleteRequest* request, ::nvrec::UpdateResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Read() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::nvrec::ReadRequest* request, ::nvrec::ReadResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRead(::grpc::ServerContext* context, ::nvrec::ReadRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvrec::ReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Scan() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::nvrec::ScanRequest* request, ::nvrec::ReadResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestScan(::grpc::ServerContext* context, ::nvrec::ScanRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvrec::ReadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Update() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdate(::grpc::ServerContext* context, ::nvrec::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvrec::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Insert() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInsert(::grpc::ServerContext* context, ::nvrec::UpdateRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvrec::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Delete() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::nvrec::DeleteRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDelete(::grpc::ServerContext* context, ::nvrec::DeleteRequest* request, ::grpc::ServerAsyncResponseWriter< ::nvrec::UpdateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Read<WithAsyncMethod_Scan<WithAsyncMethod_Update<WithAsyncMethod_Insert<WithAsyncMethod_Delete<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Read() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::nvrec::ReadRequest* request, ::nvrec::ReadResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Scan() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::nvrec::ScanRequest* request, ::nvrec::ReadResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Update() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Insert() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Delete() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::nvrec::DeleteRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Read : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Read() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::nvrec::ReadRequest, ::nvrec::ReadResponse>(std::bind(&WithStreamedUnaryMethod_Read<BaseClass>::StreamedRead, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Read() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Read(::grpc::ServerContext* context, const ::nvrec::ReadRequest* request, ::nvrec::ReadResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRead(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvrec::ReadRequest,::nvrec::ReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Scan : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Scan() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::StreamedUnaryHandler< ::nvrec::ScanRequest, ::nvrec::ReadResponse>(std::bind(&WithStreamedUnaryMethod_Scan<BaseClass>::StreamedScan, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Scan() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Scan(::grpc::ServerContext* context, const ::nvrec::ScanRequest* request, ::nvrec::ReadResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedScan(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvrec::ScanRequest,::nvrec::ReadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Update : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Update() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::StreamedUnaryHandler< ::nvrec::UpdateRequest, ::nvrec::UpdateResponse>(std::bind(&WithStreamedUnaryMethod_Update<BaseClass>::StreamedUpdate, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Update() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Update(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvrec::UpdateRequest,::nvrec::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Insert : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Insert() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::StreamedUnaryHandler< ::nvrec::UpdateRequest, ::nvrec::UpdateResponse>(std::bind(&WithStreamedUnaryMethod_Insert<BaseClass>::StreamedInsert, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Insert() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Insert(::grpc::ServerContext* context, const ::nvrec::UpdateRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInsert(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvrec::UpdateRequest,::nvrec::UpdateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Delete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Delete() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::StreamedUnaryHandler< ::nvrec::DeleteRequest, ::nvrec::UpdateResponse>(std::bind(&WithStreamedUnaryMethod_Delete<BaseClass>::StreamedDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Delete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Delete(::grpc::ServerContext* context, const ::nvrec::DeleteRequest* request, ::nvrec::UpdateResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::nvrec::DeleteRequest,::nvrec::UpdateResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Scan<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_Delete<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Read<WithStreamedUnaryMethod_Scan<WithStreamedUnaryMethod_Update<WithStreamedUnaryMethod_Insert<WithStreamedUnaryMethod_Delete<Service > > > > > StreamedService;
};

}  // namespace nvrec


#endif  // GRPC_ycsb_2eproto__INCLUDED
